services:
  cart-service:
    build:
      context: ./src/cart-service
      dockerfile: Dockerfile
    ports:
      - ${CART_PORT}
    env_file:
      - src/cart-service/.env
    depends_on:
      - redis
    networks:
      - docker-network

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docker-network

  core-shop-service:
    build:
      context: ./src/core-shop-service
      dockerfile: Dockerfile
    ports:
      - ${PORT_CORE}
    env_file:
      - src/core-shop-service/.env
    depends_on:
      - postgres
    networks:
      - docker-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - docker-network

  postgres:
    image: postgres:13.3
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - docker-network

  notifier-service:
    build:
      context: ./src/notifier-service
      dockerfile: Dockerfile
    env_file:
      - src/notifier-service/.env
    ports:
      - ${PORT_NOTIFIER}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - docker-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5673:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docker-network
  
  user-auth-service:
    build:
      context: ./src/user-auth-service
      dockerfile: Dockerfile
    ports:
      - ${PORT_AUTH}
    env_file:
      - src/user-auth-service/.env
    depends_on:
      - mongodb
      - notifier-service
    environment:
      MONGO_URL: ${MONGO}
    networks:
      - docker-network
  
  mongodb:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docker-network


  mysql:
    image: mysql
    restart: always
    container_name: mysql
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=${ROOT_PASSWORD}
      - MYSQL_DATABASE=notifier
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${PASSWORD}
    ports:
      - "3306:${PORT_MYSQL}"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docker-network

  bot:
    build: 
      context: ./src/telegram-bot
      dockerfile: Dockerfile
    container_name: telegram-bot
    ports:
      - "8000:${PORT_BOT}"
    networks:
      - docker-network
    env_file:
      - src/telegram-bot/.env
    depends_on:
      - mysql
      - mongodb

volumes:
  postgres_data:
  redis_data:

networks:
  docker-network:
